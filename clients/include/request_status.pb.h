// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request_status.proto

#ifndef PROTOBUF_INCLUDED_request_5fstatus_2eproto
#define PROTOBUF_INCLUDED_request_5fstatus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_request_5fstatus_2eproto 

namespace protobuf_request_5fstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_request_5fstatus_2eproto
namespace nvidia {
namespace inferenceserver {
class RequestStatus;
class RequestStatusDefaultTypeInternal;
extern RequestStatusDefaultTypeInternal _RequestStatus_default_instance_;
}  // namespace inferenceserver
}  // namespace nvidia
namespace google {
namespace protobuf {
template<> ::nvidia::inferenceserver::RequestStatus* Arena::CreateMaybeMessage<::nvidia::inferenceserver::RequestStatus>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nvidia {
namespace inferenceserver {

enum RequestStatusCode {
  INVALID = 0,
  SUCCESS = 1,
  UNKNOWN = 2,
  INTERNAL = 3,
  NOT_FOUND = 4,
  INVALID_ARG = 5,
  UNAVAILABLE = 6,
  UNSUPPORTED = 7,
  ALREADY_EXISTS = 8,
  RequestStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RequestStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RequestStatusCode_IsValid(int value);
const RequestStatusCode RequestStatusCode_MIN = INVALID;
const RequestStatusCode RequestStatusCode_MAX = ALREADY_EXISTS;
const int RequestStatusCode_ARRAYSIZE = RequestStatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestStatusCode_descriptor();
inline const ::std::string& RequestStatusCode_Name(RequestStatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestStatusCode_descriptor(), value);
}
inline bool RequestStatusCode_Parse(
    const ::std::string& name, RequestStatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestStatusCode>(
    RequestStatusCode_descriptor(), name, value);
}
// ===================================================================

class RequestStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvidia.inferenceserver.RequestStatus) */ {
 public:
  RequestStatus();
  virtual ~RequestStatus();

  RequestStatus(const RequestStatus& from);

  inline RequestStatus& operator=(const RequestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestStatus(RequestStatus&& from) noexcept
    : RequestStatus() {
    *this = ::std::move(from);
  }

  inline RequestStatus& operator=(RequestStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestStatus* internal_default_instance() {
    return reinterpret_cast<const RequestStatus*>(
               &_RequestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RequestStatus* other);
  friend void swap(RequestStatus& a, RequestStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestStatus* New() const final {
    return CreateMaybeMessage<RequestStatus>(NULL);
  }

  RequestStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestStatus& from);
  void MergeFrom(const RequestStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // string server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // uint64 request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  ::google::protobuf::uint64 request_id() const;
  void set_request_id(::google::protobuf::uint64 value);

  // .nvidia.inferenceserver.RequestStatusCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::nvidia::inferenceserver::RequestStatusCode code() const;
  void set_code(::nvidia::inferenceserver::RequestStatusCode value);

  // @@protoc_insertion_point(class_scope:nvidia.inferenceserver.RequestStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::uint64 request_id_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_request_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestStatus

// .nvidia.inferenceserver.RequestStatusCode code = 1;
inline void RequestStatus::clear_code() {
  code_ = 0;
}
inline ::nvidia::inferenceserver::RequestStatusCode RequestStatus::code() const {
  // @@protoc_insertion_point(field_get:nvidia.inferenceserver.RequestStatus.code)
  return static_cast< ::nvidia::inferenceserver::RequestStatusCode >(code_);
}
inline void RequestStatus::set_code(::nvidia::inferenceserver::RequestStatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:nvidia.inferenceserver.RequestStatus.code)
}

// string msg = 2;
inline void RequestStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestStatus::msg() const {
  // @@protoc_insertion_point(field_get:nvidia.inferenceserver.RequestStatus.msg)
  return msg_.GetNoArena();
}
inline void RequestStatus::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvidia.inferenceserver.RequestStatus.msg)
}
#if LANG_CXX11
inline void RequestStatus::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nvidia.inferenceserver.RequestStatus.msg)
}
#endif
inline void RequestStatus::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvidia.inferenceserver.RequestStatus.msg)
}
inline void RequestStatus::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvidia.inferenceserver.RequestStatus.msg)
}
inline ::std::string* RequestStatus::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:nvidia.inferenceserver.RequestStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestStatus::release_msg() {
  // @@protoc_insertion_point(field_release:nvidia.inferenceserver.RequestStatus.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:nvidia.inferenceserver.RequestStatus.msg)
}

// string server_id = 3;
inline void RequestStatus::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestStatus::server_id() const {
  // @@protoc_insertion_point(field_get:nvidia.inferenceserver.RequestStatus.server_id)
  return server_id_.GetNoArena();
}
inline void RequestStatus::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvidia.inferenceserver.RequestStatus.server_id)
}
#if LANG_CXX11
inline void RequestStatus::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nvidia.inferenceserver.RequestStatus.server_id)
}
#endif
inline void RequestStatus::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvidia.inferenceserver.RequestStatus.server_id)
}
inline void RequestStatus::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvidia.inferenceserver.RequestStatus.server_id)
}
inline ::std::string* RequestStatus::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:nvidia.inferenceserver.RequestStatus.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestStatus::release_server_id() {
  // @@protoc_insertion_point(field_release:nvidia.inferenceserver.RequestStatus.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestStatus::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:nvidia.inferenceserver.RequestStatus.server_id)
}

// uint64 request_id = 4;
inline void RequestStatus::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestStatus::request_id() const {
  // @@protoc_insertion_point(field_get:nvidia.inferenceserver.RequestStatus.request_id)
  return request_id_;
}
inline void RequestStatus::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:nvidia.inferenceserver.RequestStatus.request_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace inferenceserver
}  // namespace nvidia

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nvidia::inferenceserver::RequestStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nvidia::inferenceserver::RequestStatusCode>() {
  return ::nvidia::inferenceserver::RequestStatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_request_5fstatus_2eproto
